"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractEventsFromICal = void 0;
var ical2json_1 = __importDefault(require("ical2json"));
var dayjs_1 = __importDefault(require("dayjs"));
function extractEventsFromICal(calendarData, preferredTimeZone) {
    var _a;
    var iCalendarJSONData = ical2json_1.default.convert(calendarData);
    var vCalendar = iCalendarJSONData.VCALENDAR[0];
    var calendarTimeZone = vCalendar["X-WR-TIMEZONE"];
    var vEvents = (_a = vCalendar.VEVENT) !== null && _a !== void 0 ? _a : [];
    return vEvents
        .map(function (vEvent) {
        var _a;
        var keys = Object.keys(vEvent);
        var startDateKey = keys.find(function (key) { return key.startsWith("DTSTART"); });
        if (!startDateKey) {
            return null;
        }
        var eventTimeZone = (_a = startDateKey === null || startDateKey === void 0 ? void 0 : startDateKey.match(/^DTSTART;TZID=(.*)$/)) === null || _a === void 0 ? void 0 : _a[1];
        var endDateKey = eventTimeZone ? "DTEND;TZID=" + eventTimeZone : "DTEND";
        var parsedTimeZone = eventTimeZone || calendarTimeZone;
        try {
            var startDate = _parseICalDate(vEvent[startDateKey], parsedTimeZone);
            var endDate = _parseICalDate(vEvent[endDateKey], parsedTimeZone);
            return {
                startAt: startDate.tz(preferredTimeZone),
                endAt: endDate.tz(preferredTimeZone),
            };
        }
        catch (_) {
            return null;
        }
    })
        .filter(function (event) { return event; });
}
exports.extractEventsFromICal = extractEventsFromICal;
function _parseICalDate(dateString, timeZone) {
    if (dateString.length > 15) {
        var offset = parseInt(dateString.slice(15).replace(":", "."), 10);
        return dayjs_1.default(dateString.slice(0, 15)).utcOffset(Number.isNaN(offset) ? 0 : offset, true);
    }
    return dayjs_1.default.tz(dateString, timeZone);
}
