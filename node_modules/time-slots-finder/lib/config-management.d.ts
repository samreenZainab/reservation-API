import { Period, Shift, TimeSlotsFinderConfiguration, AvailablePeriod } from "./types";
/**
 * Check the validity of a configuration for the time-slots service. If the configuration is
 * invalid, an error will be thrown to describe how it's invalid.
 * @throws {TimeSlotsFinderError}
 * @param {TimeSlotsFinderConfiguration} configuration
 * @return {boolean}
 */
export declare function isConfigurationValid(configuration: TimeSlotsFinderConfiguration): boolean;
/**
 * Return a reformatted array of availablePeriods without overlapping shifts. Not mutating the
 * originals data.
 * @param {AvailablePeriod[]} availablePeriods The array of availablePeriods to reformat
 * @return {AvailablePeriod[]}
 */
export declare function _mergeOverlappingShiftsInAvailablePeriods(availablePeriods: AvailablePeriod[]): AvailablePeriod[];
/**
 * Check the validity of a configuration for the time-slots service.
 * @param {Shift[]} shifts The shifts to refactor into non-overlapping shifts.
 * @returns {Shift[]}
 */
export declare function _mergeOverlappingShifts(shifts: Shift[]): Shift[];
/**
 * Check the validity of a configuration for the time-slots service.
 * @param {Period} period The shifts to refactor into non-overlapping shifts.
 * @returns {boolean}
 */
export declare function _isUnavailablePeriodValid(period: Period): boolean;
